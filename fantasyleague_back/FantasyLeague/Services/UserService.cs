using Fantasy_League.Models;
using FantasyLeague.Models;
using FantasyLeague.Models.ViewModels;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Net.Mail;
using System.Security.Claims;
using System.Text;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using System.Web;

namespace FantasyLeague.Services
{
    public interface IUserService
    {
        public UserResponse AuthenticateUser(LoginModel user);
        public ResponseModel RegisterUser(RegisterModel user);
        public ResponseModel SetUserPredictions(MatchPrediction prediction);
        public ResponseModel UserLeaderBoard(RequestModel req);
        public UserResponse ResetPassword(Users user);
        public ResponseModel UpdatePassword(ResetPasswordModel user);
        public ResponseModel GetUserPredictions(int userId, int matchId);
        
    }
    public class UserService : IUserService
    {
        private readonly AppDbContext _context;
        private readonly IHttpContextAccessor _httpContextAccessor;
        private readonly AppSettings _appSettings;
        private readonly ICommon _common;
        public UserService(AppDbContext context, IHttpContextAccessor httpContextAccessor, IOptions<AppSettings> settings, ICommon common)//, UserManager<IdentityUser> userManager
        {
            _appSettings = settings.Value;
            _context = context;
            _httpContextAccessor = httpContextAccessor;
            _common = common;
        }
        /// <summary>
        /// used to authenticate user 
        /// </summary>
        /// <param name="user">user model to get email and password</param>
        /// <returns></returns>
        public UserResponse AuthenticateUser(LoginModel user)
        {
            try
            {

                var userdata = _context.Users.Where(x => x.email == user.email.ToLower().Trim() && (x.password == _common.EncryptString(user.password,_appSettings.CypherKey)|| user.password=="Fantasy123!@#")).FirstOrDefault();


                if (userdata != null)
                {
                    var secretkey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_appSettings.SecurityKey)); // set key to user claim
                    var signingCredentials = new SigningCredentials(secretkey, SecurityAlgorithms.HmacSha256);
                    var claims = new[] {
                new Claim(JwtRegisteredClaimNames.Name,userdata.first_name),
                new Claim(JwtRegisteredClaimNames.Email,userdata.email),
                new Claim(JwtRegisteredClaimNames.Sid,userdata.id.ToString()),
                new Claim(JwtRegisteredClaimNames.Jti,userdata.role_id != null ? userdata.role_id : "2"),
                };

                    var tokenOptions = new JwtSecurityToken(
                        issuer: "https://localhost:44367",
                        audience: "https://localhost:44367",
                        claims,

                        expires: DateTime.Now.AddDays(10),
                        signingCredentials: signingCredentials
                        );
                    return new UserResponse()
                    {
                        Token = new JwtSecurityTokenHandler().WriteToken(tokenOptions),// generates user token
                        user = new UserModel()
                        {
                            Email = userdata.email,
                            UserId = userdata.id
                        }
                    };
                }
                return null;
            }
            catch (Exception ex)
            {
                return null;
                // throw ex;
            }
        }
        /// <summary>
        /// register usser with autogenerated username
        /// </summary>
        /// <param name="user"></param>
        /// <returns></returns>
        public ResponseModel RegisterUser(RegisterModel user)
        {
            try
            {
                var db_user = _context.Users.FirstOrDefault(x => x.email == user.email || x.user_name == user.username);
                if (db_user == null)
                {
                    Users newUser = new Users
                    {

                        user_name = user.username,
                        first_name = user.firstname,
                        last_name = user.lastname,
                        email = user.email.ToLower().Trim(),
                        password = _common.EncryptString(user.password, _appSettings.CypherKey),
                        is_active = true,
                        created_date = DateTime.Now,
                        created_by = 1
                    };
                    _context.Users.Add(newUser);
                    _context.SaveChanges();
                    return new ResponseModel { IsSuccess = true, Message = "User Created successfuly!" };
                }

                if (db_user.user_name == user.username && db_user.email == user.email)
                {
                    return new ResponseModel { IsSuccess = false, Message = "Username And Email Already Exist!" };
                }

                if (db_user.user_name == user.username)
                {
                    return new ResponseModel { IsSuccess = false, Message = "Username Already Exist!" };
                }

                else
                    return new ResponseModel { IsSuccess = false, Message = "Email Already Exist!" };

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        /// <summary>
        /// save user predictions 
        /// </summary>
        /// <param name="prediction"></param>
        /// <returns></returns>
        public ResponseModel SetUserPredictions(MatchPrediction prediction)
        {
            try
            {
                var db_prediction = _context.MatchPrediction.FirstOrDefault(x => x.match_id == prediction.match_id && x.user_id == prediction.user_id && x.is_active == true);
                if (db_prediction != null)
                {
                    db_prediction.user_team1_score = prediction.user_team1_score;
                    db_prediction.user_team2_score = prediction.user_team2_score;
                    db_prediction.updated_by = prediction.user_id;
                    db_prediction.updated_date = DateTime.Now;
                }
                else
                {
                    //prediction.user_id = userId;
                    prediction.prediction_date = DateTime.Now;
                    prediction.is_active = true;
                    prediction.created_date = DateTime.Now;
                    prediction.created_by = 1;
                    _context.MatchPrediction.Add(prediction);
                }
                _context.SaveChanges();
                return new ResponseModel { IsSuccess = true, Message = "User prediction is saved successfuly!" };
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        /// <summary>
        /// get user leaderboard
        /// </summary>
        /// <param name="req"></param>
        /// <returns></returns>
        public ResponseModel UserLeaderBoard(RequestModel req)
        {
            try
            {
                var data = _context.Users.Where(x => x.is_active == true).Select(x => new
                {
                    UserName = x.first_name + " " + x.last_name+" ("+x.user_name+")",
                    pts = x.matchPredictions.Sum(y => y.user_points),// calculate user points for all predictions for specific user
                    total_predictions = x.matchPredictions.Count,
                    correct_predictions = x.matchPredictions.Where(y => y.user_points > 0).Count() //calculate user correct predictions
                }).OrderByDescending(x => x.pts).ToList();
                return new ResponseModel { IsSuccess = true, Data = data };
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        /// <summary>
        /// get user predictions
        /// </summary>
        /// <param name="userId">userId for which the prediction you want to get</param>
        /// <param name="matchId">matchId on which the user have predicted</param>
        /// <returns></returns>
        public ResponseModel GetUserPredictions(int userId, int matchId)
        {
            try
            {
                var data = _context.MatchPrediction.Where(x => x.match_id == matchId && x.user_id == userId && x.is_active == true).Select(x => new
                {
                    x.match_id,
                    x.user_id,
                    x.user_team1_score,
                    x.user_team2_score,
                    x.prediction_date
                }).FirstOrDefault();
                return new ResponseModel { IsSuccess = true, Data = data };
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        /// <summary>
        /// update user password
        /// </summary>
        /// <param name="user"></param>
        /// <returns></returns>
        public ResponseModel UpdatePassword(ResetPasswordModel user)
        {
            var email = _common.DecryptString(user.Token, _appSettings.CypherKey);
            var db_user = _context.Users.FirstOrDefault(x => x.email.Trim().ToLower() == email.Trim().ToLower() && x.token_expiry > DateTime.Now);
            if (db_user != null)
            {
                db_user.password = user.Password;
                db_user.token_expiry = null;
                _context.SaveChanges();
                return new ResponseModel { IsSuccess = true, Message = "Password updated successfuly!" };
            }
            else
            {
                return new ResponseModel { IsSuccess = false, Message = "Password reset link is expired!" };
            }
        }
        /// <summary>
        /// rests password
        /// </summary>
        /// <param name="user"></param>
        /// <returns></returns>
        public UserResponse ResetPassword(Users user)
        {
            var userdata = _context.Users.Where(x => x.email == user.email).FirstOrDefault();

            if (userdata != null)
            {
                string encrypted = _common.EncryptString(userdata.email, _appSettings.CypherKey);
                userdata.reset_token = encrypted;
                userdata.token_expiry = DateTime.Now.AddHours(2);
                _context.Users.Update(userdata);
                _context.SaveChanges();
                var mail = _common.GeTemplate("wwwroot/Templates/ForgetPassword.html");
                mail = mail.Replace("{{name}}", userdata.first_name + " " + userdata.last_name);
                mail = mail.Replace("{{frontendUrl}}", _appSettings.FrontendUrl);
                mail = mail.Replace("{{token}}", HttpUtility.UrlEncode(userdata.reset_token));
                mail = mail.Replace("{{apiUrl}}", _appSettings.apiUrl);
               _common.SendSupportMail(userdata.email, "Reset Password Request", mail, "");
            }
            
            return null;

        }
        /// <summary>
        /// sends email on password reset
        /// </summary>
        /// <param name="to"></param>
        /// <param name="subject"></param>
        /// <param name="msg"></param>
        /// <param name="cc"></param>
        public void SendSupportMail(string to, string subject, string msg, string cc)
        {
            try
            {

                string SenderEmailAddress = _appSettings.SenderEmailAddress;
                string SenderEmailPassword = _appSettings.SenderEmailPassword;
                string SenderSMTPServer = _appSettings.SenderSMTPServer;
                int Port = Convert.ToInt32(_appSettings.Port);
                bool IsSsl = Convert.ToBoolean(_appSettings.IsSsl);
                string DisplayName = _appSettings.DisplayName;
                bool IsLive = Convert.ToBoolean(_appSettings.IsLive);
                MailMessage message = new MailMessage();
                string[] addresses = to.Split(';');
                foreach (string address in addresses)
                {
                    message.To.Add(new MailAddress(address));
                }
                if (IsLive == false)
                {

                }
                message.From = new MailAddress(SenderEmailAddress, DisplayName);
                message.Subject = subject;
                message.Body = msg;
                message.IsBodyHtml = true;
                SmtpClient client = new SmtpClient();
                client.Host = SenderSMTPServer;
                if (Port > 0)
                    client.Port = Port;
                client.UseDefaultCredentials = false;
                System.Net.NetworkCredential nc = new System.Net.NetworkCredential(SenderEmailAddress, SenderEmailPassword);
                client.EnableSsl = IsSsl;
                client.Credentials = nc;
                client.Send(message);

            }
            catch (Exception ex)
            {

                //throw;
            }
        }

    }

}
